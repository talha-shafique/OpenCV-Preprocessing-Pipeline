# -*- coding: utf-8 -*-
"""OpenCV Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13SjwfNPG4j1VlHwouJb9GKIQmKHhVpH7
"""

import os, cv2, numpy as np, matplotlib.pyplot as plt, time
from pathlib import Path

BASE = Path(".")
IM_DIR = BASE / "images"
OUT_DIR = BASE / "outputs"
OUT_DIR.mkdir(exist_ok=True, parents=True)

def save_and_close_plot(fig, filename):
    fig.savefig(OUT_DIR / filename)
    plt.close(fig)

def show_and_save(img, title="", cmap=None, filename=None):
    fig = plt.figure(figsize=(6,4))
    if img.ndim == 2:  # grayscale
        plt.imshow(img, cmap=cmap or "gray")
    else:
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis("off")
    if filename:
        save_and_close_plot(fig, filename)
    else:
        plt.show() # Keep for debugging if needed, but won't be called if filename is provided

img_paths = sorted([p for p in IM_DIR.iterdir() if p.suffix.lower() in [".jpg",".jpeg",".png"]])[:2]
assert len(img_paths) >= 2, "Please add at least two images."
img1 = cv2.imread(str(img_paths[0]))
img2 = cv2.imread(str(img_paths[1]))

show_and_save(img1, f"Image 1: {img_paths[0].name}", filename=f"img1_original.jpg")
show_and_save(img2, f"Image 2: {img_paths[1].name}", filename=f"img2_original.jpg")
cv2.imwrite(str(OUT_DIR / "img1_original_cv2.jpg"), img1) # Save original using cv2 as well
cv2.imwrite(str(OUT_DIR / "img2_original_cv2.jpg"), img2)
print("Saved original images to outputs/")

def plot_hist_and_save(img_bgr, name_prefix):
    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)
    ycrcb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2YCrCb)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_gray.jpg"), gray)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_hsv.jpg"), hsv)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_ycrcb.jpg"), ycrcb)
    
    hist = cv2.calcHist([gray],[0],None,[256],[0,256]).ravel()
    fig_hist = plt.figure(figsize=(6,3))
    plt.plot(hist, color="black")
    plt.title(f"{name_prefix}: Gray Histogram")
    plt.xlim([0,256])
    plt.tight_layout()
    save_and_close_plot(fig_hist, f"{name_prefix}_gray_histogram.png")

    show_and_save(gray, f"{name_prefix} Grayscale", cmap="gray", filename=f"{name_prefix}_grayscale_display.jpg")
    show_and_save(hsv, f"{name_prefix} HSV", filename=f"{name_prefix}_hsv_display.jpg")
    show_and_save(ycrcb, f"{name_prefix} YCrCb", filename=f"{name_prefix}_ycrcb_display.jpg")

plot_hist_and_save(img1, "img1")
plot_hist_and_save(img2, "img2")
print("Saved colorspace conversions and histograms.")

def denoise_suite_and_save(img_bgr, name_prefix):
    g3 = cv2.GaussianBlur(img_bgr, (3,3), 0)
    g7 = cv2.GaussianBlur(img_bgr, (7,7), 0)
    m3 = cv2.medianBlur(img_bgr, 3)
    m5 = cv2.medianBlur(img_bgr, 5)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_gauss3.jpg"), g3)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_gauss7.jpg"), g7)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_median3.jpg"), m3)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_median5.jpg"), m5)
    
    fig_denoise = plt.figure(figsize=(10,6))
    imgs = [img_bgr, g3, g7, m3, m5]
    titles = ["Original","Gaussian 3","Gaussian 7","Median 3","Median 5"]
    for i,(im,t) in enumerate(zip(imgs,titles),1):
        plt.subplot(2,3,i); plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.title(t); plt.axis("off")
    plt.tight_layout()
    save_and_close_plot(fig_denoise, f"{name_prefix}_denoise_suite.png")

denoise_suite_and_save(img1, "img1")
denoise_suite_and_save(img2, "img2")

def edge_suite_and_save(img_bgr, name_prefix):
    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    sobelx = cv2.Sobel(gray, cv2.CV_16S, 1,0, ksize=3)
    sobely = cv2.Sobel(gray, cv2.CV_16S, 0,1, ksize=3)
    sobelx = cv2.convertScaleAbs(sobelx)
    sobely = cv2.convertScaleAbs(sobely)
    lap = cv2.Laplacian(gray, cv2.CV_16S, ksize=3); lap = cv2.convertScaleAbs(lap)
    canny1 = cv2.Canny(gray, 50,150)
    canny2 = cv2.Canny(gray,100,200)
    for name,img in [("sobelx",sobelx),("sobely",sobely),("laplacian",lap),("canny_50_150",canny1),("canny_100_200",canny2)]:
        cv2.imwrite(str(OUT_DIR / f"{name_prefix}_{name}.jpg"), img)
    
    fig_edge = plt.figure(figsize=(10,6))
    maps = [sobelx, sobely, lap, canny1, canny2]
    titles = ["Sobel X","Sobel Y","Laplacian","Canny 50-150","Canny 100-200"]
    for i,(im,t) in enumerate(zip(maps,titles),1):
        plt.subplot(2,3,i); plt.imshow(im, cmap="gray"); plt.title(t); plt.axis("off")
    plt.tight_layout()
    save_and_close_plot(fig_edge, f"{name_prefix}_edge_suite.png")

edge_suite_and_save(img1, "img1")
edge_suite_and_save(img2, "img2")

def thresh_morph_contours_and_save(img_bgr, name_prefix):
    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    _, th = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    k3 = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))
    opened = cv2.morphologyEx(th, cv2.MORPH_OPEN, k3)
    closed = cv2.morphologyEx(th, cv2.MORPH_CLOSE, k3)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_th_otsu.jpg"), th)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_opened.jpg"), opened)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_closed.jpg"), closed)
    contours, _ = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    filtered = [c for c in contours if cv2.contourArea(c) > 100]
    canvas = img_bgr.copy()
    cv2.drawContours(canvas, filtered, -1, (0,255,0), 2)
    for c in filtered:
        x,y,w,h = cv2.boundingRect(c)
        cv2.rectangle(canvas, (x,y), (x+w,y+h), (255,0,0), 2)
    cv2.imwrite(str(OUT_DIR / f"{name_prefix}_contours.jpg"), canvas)
    print(f"{name_prefix}: total contours={len(contours)}, kept={len(filtered)}")
    
    fig_thresh = plt.figure(figsize=(10,6))
    panels = [(gray,"Gray"), (th,"Otsu"), (opened,"Open"), (closed,"Close"),
              (cv2.cvtColor(canvas, cv2.COLOR_BGR2RGB),"Contours")]
    for i,(im,t) in enumerate(panels,1):
        plt.subplot(2,3,i)
        if isinstance(im, np.ndarray) and im.ndim==2:
            plt.imshow(im, cmap="gray")
        else:
            plt.imshow(im)
        plt.title(t); plt.axis("off")
    plt.tight_layout()
    save_and_close_plot(fig_thresh, f"{name_prefix}_thresh_morph_contours_suite.png")

thresh_morph_contours_and_save(img1, "img1")
thresh_morph_contours_and_save(img2, "img2")

def benchmark_ops(img_bgr, name_prefix):
    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    t0 = time.perf_counter(); _ = cv2.GaussianBlur(img_bgr, (7,7), 0); t1 = time.perf_counter()
    _ = cv2.Canny(gray, 100,200); t2 = time.perf_counter()
    print(f"{name_prefix} Gaussian(7x7): {(t1-t0)*1000:.2f} ms")
    print(f"{name_prefix} Canny(100-200): {(t2-t1)*1000:.2f} ms")
benchmark_ops(img1, "img1")
benchmark_ops(img2, "img2")

observations = [
    "Median blur preserved edges better on the noisy image.",
    "Canny(100–200) gave clean edges, fewer false positives than 50–150.",
    "Morphological closing after Otsu threshold filled gaps and improved contour detection.",
    "Typical timings: Gaussian(7x7) around X ms; Canny(100-200) Y ms per 1080p image."
]
for i,o in enumerate(observations,1):
    print(f"{i}. {o}")
